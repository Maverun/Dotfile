global !p

def wrap(s,width):
    word_array = s.split(" ") #split word
    current_line = ""
    result = []
    for w in word_array:
        if len(current_line) + len(w) > width:
            result.append(current_line)
            current_line = ""
        current_line += f" {w}"
    result.append(current_line)
    return result

def head_line(s):
    comment = get_comment(s)
    diff = 2 if len(comment) == 2 else 0
    line = comment+ "=" * (78 - diff) + comment
    snip.rv = line

def get_comment(s):
	ft = s.ft

	#print("filetype is ",ft)
	if ft is None: return "#"
	elif ft == "python": return "#"
	elif ft == "vim": return '"'
	return "#"

def comment(snip):
    snip.rv = get_comment(snip)



def first_half(text):
    snip.rv = int((79/2) - int(len(text)/2)) * " "

def second_half(text):
    snip.rv = round((78/2)-len(text)/2) * " "

def get_comment_raw(file):
    file = file[file.rfind(".") +1 :]
    if file.lower() in ("java","cpp","c","rs","js"):
        return "//"
    elif file.lower() in "vim":
        return '"'
    return "#" #Auto assume it is bash, python,R etc

def body_headline_create(s,middle=False):
    start = snip.snippet_start[0]
    end = snip.snippet_end[0]
    text = ""
    data = []
    for i in range(start,end):
        x =  s.buffer[i]
        if x == "!BLOCK!": continue
        if len(x) < 50 : data.append(x)
        else: text += s.buffer[i]
    data += wrap(text,50) #we are gonna split within 50 space close, could be 52 etc
    #Based on this api helpful https://pynvim.readthedocs.io/en/latest/api/buffer.html
    comment = get_comment_raw(s.window.buffer.name) #getting files name
    
    #now we will get different between two and then u know make line and center...
    diff = 80 - (len(comment) * 2) 
    middle_sign = " " if middle else "="
    line = comment + middle_sign * diff + comment 
    #remain space inside after both side comments, 80 default width
    line_result = [line] #First header line 
    for m in data:
        whole = comment + m.center(diff) + comment
        line_result.append(whole)
    line_result.append(line) #last header line
    snip.buffer[start:end] = line_result #neat is that it auto expand.
endglobal

#==============================================================================#
#                              Headline like this                              #
#==============================================================================#

snippet headline "Giving Banner or headline!" b
`!p head_line(snip)`
`!p comment(snip)``!p first_half(t[1])`${1:${VISUAL}}`!p second_half(t[1])``!p comment(snip)`
`!p head_line(snip)`
$0
endsnippet

post_jump "if snip.tabstop ==0: body_headline_create(snip)"
snippet body-headline "Body of banner/Headline" b
!BLOCK!
$1
${2:${VISUAL}}
!BLOCK!
$0
endsnippet

post_jump "if snip.tabstop ==0: body_headline_create(snip,True)"
snippet middle-headline "Body of banner/Headline" b
!BLOCK!
${2:${VISUAL}}
!BLOCK!
$0
endsnippet



snippet info-owner "Give info about current user" b
`!v strftime("%c")`
Author: ${1:Maverun}
File: `!p snip.rv = snip.fn`
$0
endsnippet

snippet lorem "Lorem Ipsum generation" b
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Etiam nec velit nec tortor blandit congue. Ut eget aliquet metus.
Maecenas felis arcu, cursus at dui ut, aliquet ultricies ipsum. 
Morbi bibendum placerat orci, id venenatis ante varius a.
Nulla semper elit at turpis rutrum, eget tristique tortor hendrerit. 
Aenean lorem diam, molestie in vehicula et, elementum nec nisl. 
Interdum et malesuada fames ac ante ipsum primis in faucibus. 
Integer malesuada ornare metus, vel mattis ante porttitor a. 
Pellentesque ut odio quis ligula rhoncus pretium. 
endsnippet


